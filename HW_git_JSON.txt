JSON
 4. Создать внешний репозиторий c названием JSON. -- create repository
 5. Клонировать репозиторий JSON на локальный компьютер. -- A. code - clone - ssh - copy. 
                                                            B. В терминале git clone git@github.com:kornet82/JSON.git
							    C. git remote -v && git remote rm origin (если есть старые связи)
							    D. git remote add origin git@github.com:kornet82/JSON.git	
 6. Внутри локального JSON создать файл “new.json”.  --   touch new.json
 7. Добавить файл под гит.                           -- git add new.json 
 8. Закоммитить файл.				     --   git commit -m "add new.json"
 9. Отправить файл на внешний GitHub репозиторий.      --   git push origin main 
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). 
Всё написать в формате JSON.   
{
	"ФИО": "Азаров Павел Александрович",
	"возраст": 41,
	"количество домашних животных": 0,
	"будущая желаемая зарплата": "5000E"
}
 11. Отправить изменения на внешний репозиторий.  -- git add new.json 
						  --   git commit -m "add info to new.json"
						  --   git push origin main 
 12. Создать файл preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях 
(Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
{
	"Любимый фильм": "Назад в будущее",
	"любимый сериал": "Friends",
	"любимая еда": "Пельмени",
	"любимое время года": "Осень",
	"Страна которую хотели бы посетить": "Швейцария"
}
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON -- cat > skills.json
{
	"Skills": [
		"1. Базовая теория",
		"2. Что такое клиент-серверная архитектура",
		"3. HTTP Методы запросов на сервер",
		"4. Коды ответов HTTP сервера.", "5. Структуры HTTP запросов и ответов.",
		"5. Структуры HTTP запросов и ответов.",
		"6. Что такое JSON, XML. Их структура.",
		"7. Тестирование API через Postman (JS, автотесты API)",
		"8. Снятие и чтение логов c внешнего сервера.",
		"9. Снифинг http web трафика через Charles и Fiddler.",
		"10. Dev Tools веб браузеров (Google Chrome, FireFox).",
		"11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)",
		"12. Мобильное тестирование.",
		"13. Особенность iOS, Android, гайдлайны.",
		"14. Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)",
		"15. Сборка Android приложений на Android Studio.",
		"16. ADB (управление андройд девайсами).",
		"17. Настройка прокси и vpn на iOS и Android.",
		"18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.",
		"19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)",
		"20. Основы bash скриптинг, автоматизация рутинных задач на сервере.",
		"21. Доступ к удалённым серверам.",
		"22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).",
		"23. База данных Postgres (установка, настройка и использование).",
		"24. Нереляционная база данных Redis (установка, настройка и использование).",
		"25. Нагрузочное тестирование в Jmeter.",
		"26. Методология разработки Scrum.",
		"27. Техники тест-дизайна (Классы эквивалентности, граничные значения, комбинаторные техники (Попарный, ортогональный, базовый выбор, каждый выбор), состояния и переходы)",
		"28. Python. (Изучение основ. Создание клиент серверного приложения)"
	]
}
 15. Отправить сразу 2 файла на внешний репозиторий.  -- git add .
						      -- git commit -m "add preferences&skills"
						      -- git push origin main	
 16. На веб интерфейсе создать файл bug_report.json.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 20. Синхронизировать внешний и локальный репозиторий JSON --git pull